apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-test-script
  namespace: k6-operator-system
data:
  test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    const loops = {{ .Values.trafficGeneratorLoopCount }};

    function createHighProfile(scale) {
      return {
        executor: 'ramping-arrival-rate',
        startRate: 50 * scale,
        timeUnit: '1s',
        preAllocatedVUs: 50 * scale,
        maxVUs: 150 * scale,
        stages: Array(loops)
          .fill([
            { duration: '1m', target: 100 * scale },
            { duration: '1m', target: 10 * scale },
            { duration: '2m', target: 100 * scale },
            { duration: '1m', target: 20 * scale },
            { duration: '3m', target: 80 * scale },
            { duration: '2m', target: 10 * scale },
          ])
          .flat(),
      };
    }

    function createNormalProfile(scale) {
      return {
        executor: 'ramping-arrival-rate',
        startRate: 15 * scale,
        timeUnit: '1s',
        preAllocatedVUs: 15 * scale,
        maxVUs: 50 * scale,
        stages: Array(loops)
          .fill([
            { duration: '2m', target: 15 * scale },
            { duration: '2m', target: 10 * scale },
            { duration: '2m', target: 20 * scale },
            { duration: '2m', target: 10 * scale },
            { duration: '2m', target: 5 * scale },
          ])
          .flat(),
      };
    }

    function createLowProfile(scale) {
      return {
        executor: 'ramping-arrival-rate',
        startRate: 5 * scale,
        timeUnit: '1s',
        preAllocatedVUs: 5 * scale,
        maxVUs: 15 * scale,
        stages: Array(loops)
          .fill([
            { duration: '2m', target: 5 * scale },
            { duration: '2m', target: 3 * scale },
            { duration: '2m', target: 5 * scale },
            { duration: '2m', target: 2 * scale },
            { duration: '2m', target: 1 * scale },
          ])
          .flat(),
      };
    }

    function createErrorProfile(scale) {
      return {
        executor: 'constant-arrival-rate',
        rate: 5 * scale,
        timeUnit: '1s',
        duration: '60m',
        preAllocatedVUs: 10 * scale,
        maxVUs: 15 * scale,
      };
    }

    export const options = {
      scenarios: {
    {{- range $user := .Values.users }}
        '{{ $user.name }}': Object.assign(
          {{- if eq $user.k6_traffic_profile "high" -}}
          createHighProfile({{ $user.scale }}),
          {{- else if eq $user.k6_traffic_profile "normal" -}}
          createNormalProfile({{ $user.scale }}),
          {{- else if eq $user.k6_traffic_profile "low" -}}
          createLowProfile({{ $user.scale }}),
          {{- else if eq $user.k6_traffic_profile "error" -}}
          createErrorProfile({{ $user.scale }}),
          {{- end }}
          { env: { SCENARIO: '{{ $user.name }}' } }
        ),
    {{- end }}
      },
      insecureSkipTLSVerify: true,
    };

    export default function () {
      const scenarioName = __ENV.SCENARIO;
      let url;

    {{- range $user := .Values.users }}
      if (scenarioName === '{{ $user.name }}') {
        url = '{{ $user.k6_traffic_url }}';
      }
    {{- end }}

      let res = http.get(url);

    {{- range $user := .Values.users }}
      if (scenarioName === '{{ $user.name }}') {
    {{- if eq $user.k6_traffic_profile "error" }}
        check(res, { 'status was 503': (r) => r.status === 503 });
    {{- else }}
        check(res, { 'status was 200': (r) => r.status === 200 });
    {{- end }}
      }
    {{- end }}

      sleep(1);
    }
---
apiVersion: k6.io/v1alpha1
kind: K6
metadata:
  name: k6-load-test
  namespace: k6-operator-system
spec:
  parallelism: 1
  script:
    configMap:
      name: k6-test-script
      file: test.js
