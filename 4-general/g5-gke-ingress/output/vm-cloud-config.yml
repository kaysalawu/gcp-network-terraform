#cloud-config

package_update: true
package_upgrade: true

write_files:
  - path: /var/lib/gcp/fastapi/app/app/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM python:3.12-alpine
      
      WORKDIR /app
      COPY . .
      RUN pip install --verbose --no-cache-dir -r requirements.txt
      CMD ["python3", "main.py"]
      
  - path: /var/lib/gcp/fastapi/app/app/_app.py
    owner: root
    permissions: 0744
    content: |
      import os
      import socket
      from fastapi import APIRouter, Request, HTTPException
      
      router = APIRouter()
      
      def get_ipv4_address():
          try:
              with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
                  s.connect(('8.8.8.8', 80))
                  return s.getsockname()[0]
          except Exception:
              return "NotFound"
      
      def get_ipv6_address():
          try:
              with socket.socket(socket.AF_INET6, socket.SOCK_DGRAM) as s:
                  s.connect(('2001:4860:4860::8888', 80))
                  return s.getsockname()[0]
          except Exception:
              return "NotFound"
      
      hostname = socket.gethostname()
      ipv4_address = get_ipv4_address()
      ipv6_address = get_ipv6_address()
      
      def generate_data_dict(app_name, request):
          return {
              'app': app_name,
              'hostname': os.getenv('HOST_HOSTNAME', 'Unknown'),
              'c-hostname': hostname,
              'ipv4': os.getenv('HOST_IPV4', ipv4_address),
              'ipv6': os.getenv('HOST_IPV6', ipv6_address),
              'remote-addr': request.client.host,
              'headers': dict(request.headers)
          }
      
      @router.get("/")
      async def default(request: Request):
          return generate_data_dict('SERVER', request)
      
      @router.get("/path1")
      async def path1(request: Request):
          return generate_data_dict('SERVER-PATH1', request)
      
      @router.get("/path2")
      async def path2(request: Request):
          return generate_data_dict('SERVER-PATH2', request)
      
      @router.get("/healthz")
      async def healthz(request: Request):
          # Example of adding specific logic for a particular endpoint if needed
          # allowed_hosts = ["healthz.az.corp"]
          # if request.client.host not in allowed_hosts:
          #     raise HTTPException(status_code=403, detail="Access denied")
          return "OK"
      
  - path: /var/lib/gcp/fastapi/app/app/main.py
    owner: root
    permissions: 0744
    content: |
      from fastapi import FastAPI, Request, Response, HTTPException
      from fastapi.middleware.cors import CORSMiddleware
      from fastapi.responses import JSONResponse
      from _app import router as app_router
      import json
      import ssl
      import uvicorn
      
      class PrettyJSONResponse(Response):
          media_type = "application/json"
      
          def render(self, content: any) -> bytes:
              return json.dumps(content, indent=2).encode('utf-8')
      
      app = FastAPI(default_response_class=PrettyJSONResponse)
      
      # CORS middleware
      app.add_middleware(
          CORSMiddleware,
          allow_origins=["*"],  # Replace * with actual frontend domain
          allow_credentials=True,
          allow_methods=["*"],
          allow_headers=["*"],
      )
      
      # Custom middleware to add Access-Control-Allow-Origin header
      @app.middleware("http")
      async def add_cors_header(request, call_next):
          response = await call_next(request)
          response.headers["Access-Control-Allow-Origin"] = "*"
          return response
      
      # Include the API router
      app.include_router(app_router, tags=["Features"])
      
  - path: /var/lib/gcp/fastapi/app/app/requirements.txt
    owner: root
    permissions: 0744
    content: |
      cryptography==41.0.7
      fastapi==0.105.0
      uvicorn==0.25.0
      
  - path: /var/lib/gcp/fastapi/docker-compose-http-80.yml
    owner: root
    permissions: 0744
    content: |
      services:
        http-80:
          container_name: http-80
          hostname: -DCK-http-80
          build:
            context: ./app/app
            dockerfile: Dockerfile
          environment:
            HOST_HOSTNAME: ${HOSTNAME}
          network_mode: host
          command: uvicorn main:app --host '0.0.0.0' --port 80
          restart: always
        http-80-ipv6:
          container_name: http-80-ipv6
          hostname: -DCK-http-80-ipv6
          build:
            context: ./app/app
            dockerfile: Dockerfile
          environment:
            HOST_HOSTNAME: ${HOSTNAME}
          network_mode: host
          command: uvicorn main:app --host '::' --port 80
          restart: always
      
  - path: /var/lib/gcp/fastapi/docker-compose-http-8080.yml
    owner: root
    permissions: 0744
    content: |
      services:
        http-8080:
          container_name: http-8080
          hostname: -DCK-http-8080
          build:
            context: ./app/app
            dockerfile: Dockerfile
          environment:
            HOST_HOSTNAME: ${HOSTNAME}
          network_mode: host
          command: uvicorn main:app --host '0.0.0.0' --port 8080
          restart: always
        http-8080-ipv6:
          container_name: http-8080-ipv6
          hostname: -DCK-http-8080-ipv6
          build:
            context: ./app/app
            dockerfile: Dockerfile
          environment:
            HOST_HOSTNAME: ${HOSTNAME}
          network_mode: host
          command: uvicorn main:app --host '::' --port 8080
          restart: always
      
  - path: /var/lib/gcp/init/startup.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      export CLOUD_ENV=gcp
      exec > /var/log/$CLOUD_ENV-startup.log 2>&1
      export DEBIAN_FRONTEND=noninteractive
      
      apt update
      apt install -y unzip jq tcpdump dnsutils net-tools nmap apache2-utils iperf3
      
      # cloud-init install for docker did not work so installing manually here
      apt install -y ca-certificates curl gnupg lsb-release
      mkdir -p /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list >/dev/null
      apt-get update
      apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
      docker version
      docker compose version
      
      # test scripts (ipv4)
      #---------------------------
      
      # ping-ipv4
      cat <<'EOF' >/usr/local/bin/ping-ipv4
      echo -e "\n ping ipv4 ...\n"
      EOF
      chmod a+x /usr/local/bin/ping-ipv4
      
      # ping-dns4
      cat <<'EOF' >/usr/local/bin/ping-dns4
      echo -e "\n ping dns ipv4 ...\n"
      EOF
      chmod a+x /usr/local/bin/ping-dns4
      
      # curl-ipv4
      cat <<'EOF' >/usr/local/bin/curl-ipv4
      echo -e "\n curl ipv4 ...\n"
      EOF
      chmod a+x /usr/local/bin/curl-ipv4
      
      # curl-dns4
      cat <<'EOF' >/usr/local/bin/curl-dns4
      echo -e "\n curl dns ipv4 ...\n"
      EOF
      chmod a+x /usr/local/bin/curl-dns4
      
      # trace-ipv4
      cat <<'EOF' >/usr/local/bin/trace-ipv4
      echo -e "\n trace ipv4 ...\n"
      EOF
      chmod a+x /usr/local/bin/trace-ipv4
      
      # ptr-ipv4
      cat <<'EOF' >/usr/local/bin/ptr-ipv4
      echo -e "\n PTR ipv4 ...\n"
      EOF
      chmod a+x /usr/local/bin/ptr-ipv4
      
      # test scripts (ipv6)
      #---------------------------
      
      # ping-dns6
      cat <<'EOF' >/usr/local/bin/ping-dns6
      echo -e\n " ping dns ipv6 ...\n"
      EOF
      chmod a+x /usr/local/bin/ping-dns6
      
      # curl-dns6
      cat <<'EOF' >/usr/local/bin/curl-dns6
      echo -e "\n curl dns ipv6 ...\n"
      EOF
      chmod a+x /usr/local/bin/curl-dns6
      
      # trace-dns6
      cat <<'EOF' >/usr/local/bin/trace-dns6
      echo -e "\n trace ipv6 ...\n"
      EOF
      chmod a+x /usr/local/bin/trace-dns6
      
      # other scripts
      #---------------------------
      
      # dns-info
      cat <<'EOF' >/usr/local/bin/dns-info
      echo -e "\n resolvectl ...\n"
      resolvectl status
      EOF
      chmod a+x /usr/local/bin/dns-info
      
      # traffic generators (ipv4)
      #---------------------------
      
      # light-traffic generator
      
      # heavy-traffic generator
      
      # traffic generators (ipv6)
      #---------------------------
      
      # light-traffic generator
      
      # systemctl services
      #---------------------------
      
      cat <<EOF > /etc/systemd/system/flaskapp.service
      [Unit]
      Description=Manage Docker Compose services for FastAPI
      After=docker.service
      Requires=docker.service
      
      [Service]
      Type=simple
      Environment="HOSTNAME=$(hostname)"
      ExecStart=/usr/bin/docker compose -f /var/lib/$CLOUD_ENV/fastapi/docker-compose-http-80.yml up -d && \
                /usr/bin/docker compose -f /var/lib/$CLOUD_ENV/fastapi/docker-compose-http-8080.yml up -d
      ExecStop=/usr/bin/docker compose -f /var/lib/$CLOUD_ENV/fastapi/docker-compose-http-80.yml down && \
               /usr/bin/docker compose -f /var/lib/$CLOUD_ENV/fastapi/docker-compose-http-8080.yml down
      Restart=always
      StandardOutput=journal
      StandardError=journal
      
      [Install]
      WantedBy=multi-user.target
      EOF
      
      systemctl daemon-reload
      systemctl enable flaskapp.service
      systemctl restart flaskapp.service
      
      # crontabs
      #---------------------------
      
      cat <<'EOF' >/etc/cron.d/traffic-gen
      EOF
      
      crontab /etc/cron.d/traffic-gen
      

runcmd:
  - . /var/lib/gcp/init/startup.sh
  - HOSTNAME=$(hostname) docker compose -f /var/lib/gcp/fastapi/docker-compose-http-80.yml up -d
  - HOSTNAME=$(hostname) docker compose -f /var/lib/gcp/fastapi/docker-compose-http-8080.yml up -d
