#cloud-config

package_update: true
package_upgrade: true

write_files:
  - path: /var/lib/gcp/init/startup.sh
    owner: root
    permissions: 0744
    content: |
      #! /bin/bash
      
      export CLOUD_ENV=gcp
      exec >/var/log/$CLOUD_ENV-startup.log 2>&1
      export DEBIAN_FRONTEND=noninteractive
      
      apt update
      apt install -y python3-pip python3-dev python3-venv
      apt install -y unzip jq tcpdump dnsutils net-tools nmap apache2-utils iperf3
      
      # Create application directory accessible to all users
      mkdir -p /var/lib/$CLOUD_ENV/neo4j
      chmod 755 /var/lib/$CLOUD_ENV/neo4j
      cd /var/lib/$CLOUD_ENV/neo4j
      
      # Create virtual environment and install dependencies
      python3 -m venv env
      source env/bin/activate
      pip install --upgrade pip
      pip install -r requirements.txt
      deactivate
      
      # dns-info script
      cat <<'EOF' >/usr/local/bin/dns-info
      echo -e "\n resolvectl ...\n"
      resolvectl status
      EOF
      chmod a+x /usr/local/bin/dns-info
      
      # systemctl services
      cat <<EOF >/etc/systemd/system/neo4j-client.service
      [Unit]
      Description=Run Neo4j client
      After=network.target
      
      [Service]
      Type=simple
      User=nobody
      WorkingDirectory=/var/lib/$CLOUD_ENV/neo4j
      Environment="HOSTNAME=$(hostname)"
      ExecStart=/var/lib/$CLOUD_ENV/neo4j/env/bin/python3 /var/lib/$CLOUD_ENV/neo4j/client.py
      ExecStop=/bin/kill -TERM $MAINPID
      Restart=always
      StandardOutput=journal
      StandardError=journal
      
      [Install]
      WantedBy=multi-user.target
      EOF
      
      systemctl daemon-reload
      systemctl enable neo4j-client.service
      systemctl restart neo4j-client.service
      
  - path: /var/lib/gcp/neo4j/Dockerfile
    owner: root
    permissions: 0744
    content: |
      FROM python:3.9-slim
      WORKDIR /app
      COPY . /app
      RUN pip install --no-cache-dir -r requirements.txt
      CMD ["python3", "main.py"]
      
  - path: /var/lib/gcp/neo4j/client.py
    owner: root
    permissions: 0744
    content: |
      #!/usr/bin/env python3
      import time
      import sys
      import os
      from neo4j import GraphDatabase
      from neo4j.debug import watch
      from itertools import count
      from dotenv import load_dotenv
      
      load_dotenv(".env")
      
      watch("neo4j", out=sys.stdout)
      watch("neo4j", out=open("debugLogs.txt", "w"))
      
      uri = os.getenv("NEO4J_URI")
      username = os.getenv("NEO4J_USERNAME")
      password = os.getenv("NEO4J_PASSWORD")
      
      
      class Neo4jDatabase:
          def __init__(self, uri, username, password):
              self.driver = GraphDatabase.driver(
                  uri, auth=(username, password), liveness_check_timeout=180
              )  # keep_alive=True, max_connection_lifetime=180)
      
          def close(self):
              self.driver.close()
      
          def query(self, cypher_query):
              with self.driver.session() as session:
                  result = session.run(cypher_query)
                  return [record.data() for record in result]
      
      
      if __name__ == "__main__":
          neo4j_db = Neo4jDatabase(uri, username, password)
          for i in count(0):
              print("*" * 80)
              print(f"Connection {i}")
              print("*" * 80)
      
              # Write your Cypher query
              cypher_query = """
              SHOW DATABASES
              """
      
              # Run the query and print the results
              results = neo4j_db.query(cypher_query)
              for record in results:
                  print(record)
              time.sleep(2)
          # Close the connection
          neo4j_db.close()
      
  - path: /var/lib/gcp/neo4j/requirements.txt
    owner: root
    permissions: 0744
    content: |
      neo4j==5.27.0
      python-dotenv==1.0.1
      

runcmd:
  - . /var/lib/gcp/init/startup.sh
